package systray

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"

	"github.com/getlantern/systray"
)

// Manager handles system tray icon and menu
type Manager struct {
	restAddr string
	grpcAddr string
	onQuit   func()
}

// NewManager creates a new system tray manager
func NewManager(restAddr, grpcAddr string, onQuit func()) *Manager {
	return &Manager{
		restAddr: restAddr,
		grpcAddr: grpcAddr,
		onQuit:   onQuit,
	}
}

// Start initializes and shows the system tray icon
func (m *Manager) Start() {
	go systray.Run(m.onReady, m.onExit)
}

// Stop hides the system tray icon
func (m *Manager) Stop() {
	systray.Quit()
}

// onReady is called when the system tray is ready
func (m *Manager) onReady() {
	// Set icon from file
	iconPath := filepath.Join(".", "icon", "icon.ico")
	if iconData, err := os.ReadFile(iconPath); err == nil {
		systray.SetIcon(iconData)
	} else {
		log.Printf("Warning: Failed to load icon from %s: %v", iconPath, err)
		// Use fallback icon data
		systray.SetIcon(getFallbackIcon())
	}
	systray.SetTitle("gowinproc")
	systray.SetTooltip("gowinproc - Process Manager (Running)")

	// Add menu items
	mStatus := systray.AddMenuItem("Status: Running", "Server is running")
	mStatus.Disable()

	systray.AddSeparator()

	mRESTAddr := systray.AddMenuItem(fmt.Sprintf("REST: %s", m.restAddr), "REST API Address")
	mRESTAddr.Disable()

	mGRPCAddr := systray.AddMenuItem(fmt.Sprintf("gRPC: %s", m.grpcAddr), "gRPC API Address")
	mGRPCAddr.Disable()

	systray.AddSeparator()

	mOpenDashboard := systray.AddMenuItem("Open Dashboard", "Open web dashboard in browser")
	mOpenLogs := systray.AddMenuItem("View Logs", "Open logs directory")

	systray.AddSeparator()

	mQuit := systray.AddMenuItem("Quit", "Stop the server and quit")

	// Handle menu clicks
	go func() {
		for {
			select {
			case <-mOpenDashboard.ClickedCh:
				m.openDashboard()
			case <-mOpenLogs.ClickedCh:
				m.openLogs()
			case <-mQuit.ClickedCh:
				log.Println("Quit menu clicked")
				if m.onQuit != nil {
					m.onQuit()
				}
				systray.Quit()
				return
			}
		}
	}()
}

// onExit is called when the system tray exits
func (m *Manager) onExit() {
	log.Println("System tray exited")
}

// openDashboard opens the web dashboard in the default browser
func (m *Manager) openDashboard() {
	url := fmt.Sprintf("http://%s", m.restAddr)
	cmd := exec.Command("cmd", "/c", "start", url)
	if err := cmd.Start(); err != nil {
		log.Printf("Failed to open dashboard: %v", err)
	}
}

// openLogs opens the logs directory in Explorer
func (m *Manager) openLogs() {
	logsDir := "./logs"
	if _, err := os.Stat(logsDir); os.IsNotExist(err) {
		os.MkdirAll(logsDir, 0755)
	}
	cmd := exec.Command("explorer", logsDir)
	if err := cmd.Start(); err != nil {
		log.Printf("Failed to open logs directory: %v", err)
	}
}

// getFallbackIcon returns a proper ICO format icon for Windows system tray
// This is a valid 16x16 32-bit ICO file with an orange server/cylinder icon
func getFallbackIcon() []byte {
	return []byte{
		// ICO header
		0x00, 0x00, // Reserved
		0x01, 0x00, // Type: 1 = ICO
		0x01, 0x00, // Number of images: 1

		// Image directory entry
		0x10,       // Width: 16px
		0x10,       // Height: 16px
		0x00,       // Color palette: 0 = no palette
		0x00,       // Reserved
		0x01, 0x00, // Color planes: 1
		0x20, 0x00, // Bits per pixel: 32
		0x68, 0x04, 0x00, 0x00, // Size of image data: 1128 bytes
		0x16, 0x00, 0x00, 0x00, // Offset to image data: 22 bytes

		// BMP header (BITMAPINFOHEADER)
		0x28, 0x00, 0x00, 0x00, // Header size: 40 bytes
		0x10, 0x00, 0x00, 0x00, // Width: 16px
		0x20, 0x00, 0x00, 0x00, // Height: 32px (16*2 for AND mask)
		0x01, 0x00, // Planes: 1
		0x20, 0x00, // Bits per pixel: 32
		0x00, 0x00, 0x00, 0x00, // Compression: 0 = none
		0x00, 0x00, 0x00, 0x00, // Image size: 0 (uncompressed)
		0x00, 0x00, 0x00, 0x00, // X pixels per meter: 0
		0x00, 0x00, 0x00, 0x00, // Y pixels per meter: 0
		0x00, 0x00, 0x00, 0x00, // Colors used: 0
		0x00, 0x00, 0x00, 0x00, // Important colors: 0

		// Pixel data (16x16 BGRA format, bottom to top)
		// Row 16 (top)
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// Row 15
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0xFF,
		0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0xFF,
		0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// Row 14
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0xA0, 0x50, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0x80, 0x00, 0xFF,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// Row 13
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0xC0, 0xA0, 0xFF,
		0xFF, 0xC0, 0xA0, 0xFF, 0xFF, 0xC0, 0xA0, 0xFF, 0xFF, 0xC0, 0xA0, 0xFF, 0xFF, 0xC0, 0xA0, 0xFF,
		0xFF, 0xC0, 0xA0, 0xFF, 0xFF, 0xC0, 0xA0, 0xFF, 0xFF, 0xC0, 0xA0, 0xFF, 0xFF, 0x80, 0x00, 0xFF,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// Row 12
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0xA0, 0x50, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0x80, 0x00, 0xFF,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// Row 11
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0xFF,
		0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0xFF,
		0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// Row 10
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// Row 9
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// Row 8
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// Row 7
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// Row 6
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// Row 5
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// Row 4
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// Row 3
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0xFF,
		0xFF, 0xC0, 0xA0, 0xFF, 0xFF, 0xC0, 0xA0, 0xFF, 0xFF, 0xC0, 0xA0, 0xFF, 0xFF, 0xC0, 0xA0, 0xFF,
		0xFF, 0xC0, 0xA0, 0xFF, 0xFF, 0xC0, 0xA0, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// Row 2
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0xA0, 0x50, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF,
		0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0xA0, 0x50, 0xFF, 0xFF, 0x80, 0x00, 0xFF,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// Row 1 (bottom)
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0xFF,
		0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0xFF,
		0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// AND mask (all zeros = opaque)
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
}
