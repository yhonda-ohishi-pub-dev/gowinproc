// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: src/internal/proto/process_manager.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProcessManager_ListProcesses_FullMethodName        = "/proto.ProcessManager/ListProcesses"
	ProcessManager_GetProcess_FullMethodName           = "/proto.ProcessManager/GetProcess"
	ProcessManager_StartProcess_FullMethodName         = "/proto.ProcessManager/StartProcess"
	ProcessManager_StopProcess_FullMethodName          = "/proto.ProcessManager/StopProcess"
	ProcessManager_RestartProcess_FullMethodName       = "/proto.ProcessManager/RestartProcess"
	ProcessManager_GetMetrics_FullMethodName           = "/proto.ProcessManager/GetMetrics"
	ProcessManager_ScaleProcess_FullMethodName         = "/proto.ProcessManager/ScaleProcess"
	ProcessManager_UpdateAllProcesses_FullMethodName   = "/proto.ProcessManager/UpdateAllProcesses"
	ProcessManager_UpdateProcess_FullMethodName        = "/proto.ProcessManager/UpdateProcess"
	ProcessManager_GetProcessVersion_FullMethodName    = "/proto.ProcessManager/GetProcessVersion"
	ProcessManager_ListAvailableUpdates_FullMethodName = "/proto.ProcessManager/ListAvailableUpdates"
	ProcessManager_RollbackProcess_FullMethodName      = "/proto.ProcessManager/RollbackProcess"
	ProcessManager_WatchUpdate_FullMethodName          = "/proto.ProcessManager/WatchUpdate"
	ProcessManager_ListRepositories_FullMethodName     = "/proto.ProcessManager/ListRepositories"
)

// ProcessManagerClient is the client API for ProcessManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ProcessManager service provides process lifecycle management and monitoring
type ProcessManagerClient interface {
	// Process Management
	ListProcesses(ctx context.Context, in *ListProcessesRequest, opts ...grpc.CallOption) (*ListProcessesResponse, error)
	GetProcess(ctx context.Context, in *GetProcessRequest, opts ...grpc.CallOption) (*ProcessInfo, error)
	StartProcess(ctx context.Context, in *StartProcessRequest, opts ...grpc.CallOption) (*ProcessInfo, error)
	StopProcess(ctx context.Context, in *StopProcessRequest, opts ...grpc.CallOption) (*Empty, error)
	RestartProcess(ctx context.Context, in *RestartProcessRequest, opts ...grpc.CallOption) (*ProcessInfo, error)
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*Metrics, error)
	ScaleProcess(ctx context.Context, in *ScaleProcessRequest, opts ...grpc.CallOption) (*ProcessInfo, error)
	// Update Management
	UpdateAllProcesses(ctx context.Context, in *UpdateAllRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	UpdateProcess(ctx context.Context, in *UpdateProcessRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	GetProcessVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*VersionInfo, error)
	ListAvailableUpdates(ctx context.Context, in *ListUpdatesRequest, opts ...grpc.CallOption) (*ListUpdatesResponse, error)
	RollbackProcess(ctx context.Context, in *RollbackRequest, opts ...grpc.CallOption) (*RollbackResponse, error)
	// Streaming - Update Progress Monitoring
	WatchUpdate(ctx context.Context, in *WatchUpdateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UpdateStatus], error)
	// Repository Management
	ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error)
}

type processManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessManagerClient(cc grpc.ClientConnInterface) ProcessManagerClient {
	return &processManagerClient{cc}
}

func (c *processManagerClient) ListProcesses(ctx context.Context, in *ListProcessesRequest, opts ...grpc.CallOption) (*ListProcessesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProcessesResponse)
	err := c.cc.Invoke(ctx, ProcessManager_ListProcesses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerClient) GetProcess(ctx context.Context, in *GetProcessRequest, opts ...grpc.CallOption) (*ProcessInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessInfo)
	err := c.cc.Invoke(ctx, ProcessManager_GetProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerClient) StartProcess(ctx context.Context, in *StartProcessRequest, opts ...grpc.CallOption) (*ProcessInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessInfo)
	err := c.cc.Invoke(ctx, ProcessManager_StartProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerClient) StopProcess(ctx context.Context, in *StopProcessRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProcessManager_StopProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerClient) RestartProcess(ctx context.Context, in *RestartProcessRequest, opts ...grpc.CallOption) (*ProcessInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessInfo)
	err := c.cc.Invoke(ctx, ProcessManager_RestartProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*Metrics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Metrics)
	err := c.cc.Invoke(ctx, ProcessManager_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerClient) ScaleProcess(ctx context.Context, in *ScaleProcessRequest, opts ...grpc.CallOption) (*ProcessInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessInfo)
	err := c.cc.Invoke(ctx, ProcessManager_ScaleProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerClient) UpdateAllProcesses(ctx context.Context, in *UpdateAllRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, ProcessManager_UpdateAllProcesses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerClient) UpdateProcess(ctx context.Context, in *UpdateProcessRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, ProcessManager_UpdateProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerClient) GetProcessVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*VersionInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionInfo)
	err := c.cc.Invoke(ctx, ProcessManager_GetProcessVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerClient) ListAvailableUpdates(ctx context.Context, in *ListUpdatesRequest, opts ...grpc.CallOption) (*ListUpdatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUpdatesResponse)
	err := c.cc.Invoke(ctx, ProcessManager_ListAvailableUpdates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerClient) RollbackProcess(ctx context.Context, in *RollbackRequest, opts ...grpc.CallOption) (*RollbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollbackResponse)
	err := c.cc.Invoke(ctx, ProcessManager_RollbackProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processManagerClient) WatchUpdate(ctx context.Context, in *WatchUpdateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UpdateStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProcessManager_ServiceDesc.Streams[0], ProcessManager_WatchUpdate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchUpdateRequest, UpdateStatus]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProcessManager_WatchUpdateClient = grpc.ServerStreamingClient[UpdateStatus]

func (c *processManagerClient) ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRepositoriesResponse)
	err := c.cc.Invoke(ctx, ProcessManager_ListRepositories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessManagerServer is the server API for ProcessManager service.
// All implementations must embed UnimplementedProcessManagerServer
// for forward compatibility.
//
// ProcessManager service provides process lifecycle management and monitoring
type ProcessManagerServer interface {
	// Process Management
	ListProcesses(context.Context, *ListProcessesRequest) (*ListProcessesResponse, error)
	GetProcess(context.Context, *GetProcessRequest) (*ProcessInfo, error)
	StartProcess(context.Context, *StartProcessRequest) (*ProcessInfo, error)
	StopProcess(context.Context, *StopProcessRequest) (*Empty, error)
	RestartProcess(context.Context, *RestartProcessRequest) (*ProcessInfo, error)
	GetMetrics(context.Context, *GetMetricsRequest) (*Metrics, error)
	ScaleProcess(context.Context, *ScaleProcessRequest) (*ProcessInfo, error)
	// Update Management
	UpdateAllProcesses(context.Context, *UpdateAllRequest) (*UpdateResponse, error)
	UpdateProcess(context.Context, *UpdateProcessRequest) (*UpdateResponse, error)
	GetProcessVersion(context.Context, *GetVersionRequest) (*VersionInfo, error)
	ListAvailableUpdates(context.Context, *ListUpdatesRequest) (*ListUpdatesResponse, error)
	RollbackProcess(context.Context, *RollbackRequest) (*RollbackResponse, error)
	// Streaming - Update Progress Monitoring
	WatchUpdate(*WatchUpdateRequest, grpc.ServerStreamingServer[UpdateStatus]) error
	// Repository Management
	ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error)
	mustEmbedUnimplementedProcessManagerServer()
}

// UnimplementedProcessManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProcessManagerServer struct{}

func (UnimplementedProcessManagerServer) ListProcesses(context.Context, *ListProcessesRequest) (*ListProcessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcesses not implemented")
}
func (UnimplementedProcessManagerServer) GetProcess(context.Context, *GetProcessRequest) (*ProcessInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcess not implemented")
}
func (UnimplementedProcessManagerServer) StartProcess(context.Context, *StartProcessRequest) (*ProcessInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartProcess not implemented")
}
func (UnimplementedProcessManagerServer) StopProcess(context.Context, *StopProcessRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopProcess not implemented")
}
func (UnimplementedProcessManagerServer) RestartProcess(context.Context, *RestartProcessRequest) (*ProcessInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartProcess not implemented")
}
func (UnimplementedProcessManagerServer) GetMetrics(context.Context, *GetMetricsRequest) (*Metrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedProcessManagerServer) ScaleProcess(context.Context, *ScaleProcessRequest) (*ProcessInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleProcess not implemented")
}
func (UnimplementedProcessManagerServer) UpdateAllProcesses(context.Context, *UpdateAllRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAllProcesses not implemented")
}
func (UnimplementedProcessManagerServer) UpdateProcess(context.Context, *UpdateProcessRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProcess not implemented")
}
func (UnimplementedProcessManagerServer) GetProcessVersion(context.Context, *GetVersionRequest) (*VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessVersion not implemented")
}
func (UnimplementedProcessManagerServer) ListAvailableUpdates(context.Context, *ListUpdatesRequest) (*ListUpdatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableUpdates not implemented")
}
func (UnimplementedProcessManagerServer) RollbackProcess(context.Context, *RollbackRequest) (*RollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackProcess not implemented")
}
func (UnimplementedProcessManagerServer) WatchUpdate(*WatchUpdateRequest, grpc.ServerStreamingServer[UpdateStatus]) error {
	return status.Errorf(codes.Unimplemented, "method WatchUpdate not implemented")
}
func (UnimplementedProcessManagerServer) ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositories not implemented")
}
func (UnimplementedProcessManagerServer) mustEmbedUnimplementedProcessManagerServer() {}
func (UnimplementedProcessManagerServer) testEmbeddedByValue()                        {}

// UnsafeProcessManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessManagerServer will
// result in compilation errors.
type UnsafeProcessManagerServer interface {
	mustEmbedUnimplementedProcessManagerServer()
}

func RegisterProcessManagerServer(s grpc.ServiceRegistrar, srv ProcessManagerServer) {
	// If the following call pancis, it indicates UnimplementedProcessManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProcessManager_ServiceDesc, srv)
}

func _ProcessManager_ListProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).ListProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessManager_ListProcesses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).ListProcesses(ctx, req.(*ListProcessesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManager_GetProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).GetProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessManager_GetProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).GetProcess(ctx, req.(*GetProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManager_StartProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).StartProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessManager_StartProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).StartProcess(ctx, req.(*StartProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManager_StopProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).StopProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessManager_StopProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).StopProcess(ctx, req.(*StopProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManager_RestartProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).RestartProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessManager_RestartProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).RestartProcess(ctx, req.(*RestartProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManager_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessManager_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManager_ScaleProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).ScaleProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessManager_ScaleProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).ScaleProcess(ctx, req.(*ScaleProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManager_UpdateAllProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).UpdateAllProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessManager_UpdateAllProcesses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).UpdateAllProcesses(ctx, req.(*UpdateAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManager_UpdateProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).UpdateProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessManager_UpdateProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).UpdateProcess(ctx, req.(*UpdateProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManager_GetProcessVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).GetProcessVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessManager_GetProcessVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).GetProcessVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManager_ListAvailableUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).ListAvailableUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessManager_ListAvailableUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).ListAvailableUpdates(ctx, req.(*ListUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManager_RollbackProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).RollbackProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessManager_RollbackProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).RollbackProcess(ctx, req.(*RollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessManager_WatchUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchUpdateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessManagerServer).WatchUpdate(m, &grpc.GenericServerStream[WatchUpdateRequest, UpdateStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProcessManager_WatchUpdateServer = grpc.ServerStreamingServer[UpdateStatus]

func _ProcessManager_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessManagerServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessManager_ListRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessManagerServer).ListRepositories(ctx, req.(*ListRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProcessManager_ServiceDesc is the grpc.ServiceDesc for ProcessManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProcessManager",
	HandlerType: (*ProcessManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProcesses",
			Handler:    _ProcessManager_ListProcesses_Handler,
		},
		{
			MethodName: "GetProcess",
			Handler:    _ProcessManager_GetProcess_Handler,
		},
		{
			MethodName: "StartProcess",
			Handler:    _ProcessManager_StartProcess_Handler,
		},
		{
			MethodName: "StopProcess",
			Handler:    _ProcessManager_StopProcess_Handler,
		},
		{
			MethodName: "RestartProcess",
			Handler:    _ProcessManager_RestartProcess_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _ProcessManager_GetMetrics_Handler,
		},
		{
			MethodName: "ScaleProcess",
			Handler:    _ProcessManager_ScaleProcess_Handler,
		},
		{
			MethodName: "UpdateAllProcesses",
			Handler:    _ProcessManager_UpdateAllProcesses_Handler,
		},
		{
			MethodName: "UpdateProcess",
			Handler:    _ProcessManager_UpdateProcess_Handler,
		},
		{
			MethodName: "GetProcessVersion",
			Handler:    _ProcessManager_GetProcessVersion_Handler,
		},
		{
			MethodName: "ListAvailableUpdates",
			Handler:    _ProcessManager_ListAvailableUpdates_Handler,
		},
		{
			MethodName: "RollbackProcess",
			Handler:    _ProcessManager_RollbackProcess_Handler,
		},
		{
			MethodName: "ListRepositories",
			Handler:    _ProcessManager_ListRepositories_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchUpdate",
			Handler:       _ProcessManager_WatchUpdate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/internal/proto/process_manager.proto",
}
